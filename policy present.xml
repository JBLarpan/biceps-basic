<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
	--Either calls, bandwidth, or both together must be specified.
	-- minimum 300 sec for the quota (403 out of bandwidth)
	-- concurrency in all section, not able to test it 
	--max depth - number of time the query is nested.
	--The /Missions/name field is removed from requests containing more than two headers.
-->
<policies>
    <inbound>
        <base />
        <rate-limit-by-key calls="5" renewal-period="240" counter-key="@(context.Subscription?.Key ?? "anonymous")" />
		
        <ip-filter action="allow">
            <address-range from="1.1.1.1" to="1.1.1" />
        </ip-filter>
		
		<quota-by-key calls="5" bandwidth="2" renewal-period="300" counter-key="@(context.Subscription?.Key ?? "anonymous")"/>
		
        <rate-limit-by-key calls="1" renewal-period="60" counter-key="@(context.Request.IpAddress)" increment-condition="@(context.Response.StatusCode >= 200 && context.Response.StatusCode < 300)" />
		
		<quota-by-key calls="10000" bandwidth="40000" renewal-period="3600" increment-condition="@(context.Response.StatusCode >= 200 && context.Response.StatusCode < 400)"counter-key="@(context.Request.IpAddress)" />
        
		<limit-concurrency key="@((string)context.Variables["connectionId"])" max-count="3"> <forward-request timeout="120"/> </limit-concurrency>
		
		<validate-graphql-request error-variable-name="name" max-size="102400" max-depth="2"> 
        <authorize>
        <rule path="/__*" action="reject" /> 
        <rule path="/Missions/name" action="@(context.Request.Headers.Count > 0 ? "remove" : "allow")" />
        </authorize>
</validate-graphql-request>
    </limit-concurrency>
	</inbound>
    <backend>
        <base />
		<limit-concurrency key="@((string)context.Variables["connectionId"])" max-count="3"> <forward-request timeout="120"/> </limit-concurrency>

    </backend>
    <outbound>
        <base />
		<limit-concurrency key="@((string)context.Variables["connectionId"])" max-count="3"> <forward-request timeout="120"/> </limit-concurrency>

    </outbound>
    <on-error>
        <base />
		<limit-concurrency key="@((string)context.Variables["connectionId"])" max-count="3"> <forward-request timeout="120"/> </limit-concurrency>

    </on-error>
</policies>